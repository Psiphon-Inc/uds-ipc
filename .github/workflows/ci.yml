name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version-file: 'go.mod'
        check-latest: true

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        args: --timeout=5m

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['stable', 'oldstable']
    steps:
    - name: Check out code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ matrix.go-version }}
        check-latest: true

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run go fmt
      run: go fmt ./...

    - name: Run go vet
      run: go vet ./...

    - name: Build
      run: go build -v ./...

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

    - name: Upload coverage to Codecov
      if: matrix.go-version == 'stable'
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.txt
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  benchmark-basic:
    name: Basic Benchmarks
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version-file: 'go.mod'
        check-latest: true

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.24-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.24-

    - name: Download dependencies
      run: go mod download

    - name: Run basic throughput benchmarks
      run: go test -v -bench=BenchmarkBasicThroughput -benchmem -run=^$ -timeout=5m

  benchmark-sizes:
    name: Message Size Benchmarks
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version-file: 'go.mod'
        check-latest: true

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.24-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.24-

    - name: Download dependencies
      run: go mod download

    - name: Run message size benchmarks
      run: go test -v -bench=BenchmarkMessageSizes -benchmem -run=^$ -timeout=5m

  benchmark-concurrency:
    name: Concurrency Benchmarks
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version-file: 'go.mod'
        check-latest: true

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.24-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.24-

    - name: Download dependencies
      run: go mod download

    - name: Run concurrency benchmarks
      run: go test -v -bench=BenchmarkMultipleWriters -benchmem -run=^$ -timeout=5m

  benchmark-optimization:
    name: Optimization Benchmarks
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version-file: 'go.mod'
        check-latest: true

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.24-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.24-

    - name: Download dependencies
      run: go mod download

    - name: Run buffer optimization benchmarks
      run: go test -v -bench=BenchmarkBufferOptimization -benchmem -run=^$ -timeout=5m

  benchmark-specialized:
    name: Specialized Benchmarks
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version-file: 'go.mod'
        check-latest: true

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.24-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.24-

    - name: Download dependencies
      run: go mod download

    - name: Run specialized benchmarks
      run: go test -v -bench="BenchmarkWriteOnly|BenchmarkReadOnly" -benchmem -run=^$ -timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version-file: 'go.mod'
        check-latest: true

    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: '-no-fail -fmt sarif -out results.sarif ./...'
    # - name: Upload SARIF file
    #   uses: github/codeql-action/upload-sarif@v3
    #   with:
    #     sarif_file: results.sarif
